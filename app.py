# -*- coding: utf-8 -*-
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import *
import os
import random
import json
from datetime import datetime
from functools import wraps

app = Flask(__name__)

# ุฅุนุฏุงุฏุงุช LINE Bot
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN', 'YOUR_CHANNEL_ACCESS_TOKEN')
LINE_CHANNEL_SECRET = os.environ.get('LINE_CHANNEL_SECRET', 'YOUR_CHANNEL_SECRET')

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# ุชุฎุฒูู ุจูุงูุงุช ุงููุนุจุฉ
game_sessions = {}
user_scores = {}
user_cache = {}

# ููุงุฆู ุงูุฃูุนุงุจ
riddles = [
    {"q": "ูุง ุงูุดูุก ุงูุฐู ููุดู ุจูุง ุฑุฌููู ููุจูู ุจูุง ุนููููุ", "a": "ุงูุณุญุงุจ"},
    {"q": "ูู ุฑุฃุณ ููุง ุนูู ููุ ููู ููุง ุนูู ููุง ุฑุฃุณ ููุงุ ูุง ููุงุ", "a": "ุงูุฏุจูุณ ูุงูุฅุจุฑุฉ"},
    {"q": "ูุง ุงูุดูุก ุงูุฐู ูููุง ุฃุฎุฐุช ููู ูุจุฑุ", "a": "ุงูุญูุฑุฉ"},
    {"q": "ุฃูุง ูู ุงูุณูุงุกุ ุฅุฐุง ุฃุถูุช ูู ุญุฑูุงู ุฃุตุจุญุช ูู ุงูุฃุฑุถุ ูู ุฃูุงุ", "a": "ูุฌู"},
    {"q": "ูุง ุงูุดูุก ุงูุฐู ููุฌุฏ ูู ูุณุท ุจุงุฑูุณุ", "a": "ุญุฑู ุงูุฑุงุก"},
    {"q": "ุดูุก ูู ุฃุณูุงู ููุง ูุนุถุ", "a": "ุงููุดุท"},
    {"q": "ูุง ุงูุดูุก ุงูุฐู ููุชุจ ููุง ููุฑุฃุ", "a": "ุงูููู"}
]

quotes = [
    "ุงููุฌุงุญ ูู ุงูุงูุชูุงู ูู ูุดู ุฅูู ูุดู ุฏูู ููุฏุงู ุงูุญูุงุณ - ููุณุชูู ุชุดุฑุดู",
    "ุงูุทุฑููุฉ ุงููุญูุฏุฉ ููููุงู ุจุนูู ุนุธูู ูู ุฃู ุชุญุจ ูุง ุชูุนูู - ุณุชูู ุฌูุจุฒ",
    "ุงููุณุชูุจู ููู ูุฃููุฆู ุงูุฐูู ูุคูููู ุจุฌูุงู ุฃุญูุงููู - ุฅููุงููุฑ ุฑูุฒููุช",
    "ูุง ุชุดุงูุฏ ุงูุณุงุนุฉุ ุงูุนู ูุง ุชูุนููุ ุงุณุชูุฑ ูู ุงููุถู ูุฏูุงู - ุณุงู ููููุณูู",
    "ุงูุฅุจุฏุงุน ูู ุงูุฐูุงุก ููู ูุณุชูุชุน - ุฃูุจุฑุช ุฃููุดุชุงูู",
    "ุงูุญูุงุฉ 10ูช ูุง ูุญุฏุซ ูู ู90ูช ููู ุชุชูุงุนู ูุนู - ุชุดุงุฑูุฒ ุณูููุฏูู"
]

trivia_questions = [
    {"q": "ูู ุนุฏุฏ ุงูููุงูุจ ูู ุงููุฌููุนุฉ ุงูุดูุณูุฉุ", "a": "8"},
    {"q": "ูุง ูู ุฃูุจุฑ ูุญูุท ูู ุงูุนุงููุ", "a": "ุงููุญูุท ุงููุงุฏุฆ"},
    {"q": "ูู ููุชุดู ุงูุฌุงุฐุจูุฉุ", "a": "ูููุชู"},
    {"q": "ูุง ุนุงุตูุฉ ุงููุงุจุงูุ", "a": "ุทูููู"},
    {"q": "ูุง ุงูุญููุงู ุงูุฐู ููููุจ ุจุณูููุฉ ุงูุตุญุฑุงุกุ", "a": "ุงูุฌูู"}
]

emoji_puzzles = [
    {"q": "๐๐ฑ", "a": "ุฃุจู"},
    {"q": "๐ฌ๐ฟ", "a": "ุงูุณูููุง"},
    {"q": "๐๐จ", "a": "ุณูุงุฑุฉ ุณุฑูุนุฉ"},
    {"q": "๐๐ฏ", "a": "ูุญู ูุนุณู"},
    {"q": "โ๐", "a": "ูููุฉ ููุชุงุจ"}
]

true_false = [
    {"q": "ุงูุดูุณ ุชุฏูุฑ ุญูู ุงูุฃุฑุถ.", "a": "ุฎุทุฃ"},
    {"q": "ุงูุญุฏูุฏ ุฃููู ูู ุงูุจูุงุณุชูู.", "a": "ุตุญ"},
    {"q": "ุงููุญูุฉ ุชูุชุฌ ุงูุญููุจ.", "a": "ุฎุทุฃ"},
    {"q": "ุงูููุฑ ูุนูุณ ุถูุก ุงูุดูุณ.", "a": "ุตุญ"},
    {"q": "ุงููุงุก ูุชุฌูุฏ ุนูุฏ 0 ุฏุฑุฌุฉ ูุฆููุฉ.", "a": "ุตุญ"}
]

jokes = [
    "ูุงุญุฏ ุบุจู ุฑุงุญ ููุฏูุชูุฑ ูุงูู: ูู ูุง ุฃุดุฑุจ ุดุงู ุฃุญุณ ุจุฃูู ูู ุนูููุ ูุงูู ุงูุฏูุชูุฑ: ุดูู ุงูููุนูุฉ ูุจู ูุง ุชุดุฑุจ ๐",
    "ููู ูุงุญุฏ ุฑุงุญ ูุดุชุฑู ุณุฑูุฑุ ุณุฃููู ุชุจุบุงู ููุฑุฏ ููุง ูุฒุฏูุฌุ ูุงููู ูุง ุฃุจูู ููู ๐",
    "ูุฑุฉ ูุงุญุฏ ูุงู ูู ุงูุนูุงุฏุฉ ูุงููุง ูู ุงูุฏูุชูุฑ ูุดุบูู ูุงููู ูู ูุดููุฉ ุฃูุง ุจุจุฏุฃ ุงูููู ๐"
]

wisdoms = [
    "ูู ุฌุฏู ูุฌุฏุ ููู ุฒุฑุน ุญุตุฏ.",
    "ุงุจุชุณูุ ูุงุจุชุณุงูุชู ูุฏ ุชูุบูุฑ ููู ุดุฎุต ุขุฎุฑ.",
    "ุงูุตุจุฑ ููุชุงุญ ุงููุฑุฌ.",
    "ูู ุณุงุฑ ุนูู ุงูุฏุฑุจ ูุตู.",
    "ุงููููุฉ ุงูุทูุจุฉ ุตุฏูุฉ."
]


@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'


@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.strip()

    # ุฃูุงูุฑ ุจุณูุทุฉ
    if text == "ุญููุฉ":
        reply = random.choice(wisdoms)
    elif text == "ููุชุฉ":
        reply = random.choice(jokes)
    elif text == "ุงูุชุจุงุณ":
        reply = random.choice(quotes)
    elif text == "ูุบุฒ":
        r = random.choice(riddles)
        reply = f"๐น ุงููุบุฒ:\n{r['q']}\n\nุงูุชุจ ุงูุฌูุงุจ ๐"
        game_sessions[event.source.user_id] = {"answer": r["a"], "type": "riddle"}
    elif text == "ุณุคุงู":
        q = random.choice(trivia_questions)
        reply = f"โ ุงูุณุคุงู:\n{q['q']}\n\nุงูุชุจ ุงูุฌูุงุจ ๐"
        game_sessions[event.source.user_id] = {"answer": q["a"], "type": "trivia"}
    elif text == "ุฑููุฒ":
        e = random.choice(emoji_puzzles)
        reply = f"๐งฉ ุงูุชุญุฏู:\n{e['q']}\n\nุงูุชุจ ุงูุฌูุงุจ ๐"
        game_sessions[event.source.user_id] = {"answer": e["a"], "type": "emoji"}
    elif text == "ุตุญ ุฃู ุฎุทุฃ":
        t = random.choice(true_false)
        reply = f"โ๏ธ ุงูุนุจ ูุนูุง:\n{t['q']}\n(ุงูุชุจ ุตุญ ุฃู ุฎุทุฃ)"
        game_sessions[event.source.user_id] = {"answer": t["a"], "type": "tf"}
    elif text in ["ุงูุฃูุงูุฑ", "ูุงุฆูุฉ", "ูุณุงุนุฏุฉ"]:
        reply = ("๐ ุฃูุงูุฑ ุงูุจูุช:\n"
                 "- ุญููุฉ\n- ููุชุฉ\n- ุงูุชุจุงุณ\n- ูุบุฒ\n- ุณุคุงู\n- ุฑููุฒ\n- ุตุญ ุฃู ุฎุทุฃ\n\n"
                 "โจ ุฃุฑุณู ุฃู ุฃูุฑ ูุชุจุฏุฃ ุงููุนุจุฉ!")
    else:
        # ุงูุชุญูู ูู ูุฌูุฏ ุฌูุณุฉ ุณุงุจูุฉ
        if event.source.user_id in game_sessions:
            correct = game_sessions[event.source.user_id]["answer"]
            if text.strip() == correct:
                reply = "โ ุฅุฌุงุจุฉ ุตุญูุญุฉ! ุฃุญุณูุช ๐"
            else:
                reply = f"โ ุงูุฅุฌุงุจุฉ ุฎุงุทุฆุฉ.\nุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ ูู: {correct}"
            del game_sessions[event.source.user_id]
        else:
            reply = "ูุฑุญุจูุง! ุฃุฑุณู ูููุฉ 'ุงูุฃูุงูุฑ' ูุนุฑุถ ูุงุฆูุฉ ุงูุฃูุนุงุจ ๐ฎ"

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=reply)
    )


@app.errorhandler(Exception)
def handle_error(error):
    app.logger.error(f"Error: {str(error)}")
    return 'OK', 200


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)
