import os
import logging
from flask import Flask, request, jsonify
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError, LineBotApiError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, QuickReply, QuickReplyButton, MessageAction
import google.generativeai as genai
import re

# ุฅุนุฏุงุฏ ุงูุณุฌูุงุช
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ========================
# LINE API
# ========================
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.environ.get("LINE_CHANNEL_SECRET")

if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_CHANNEL_SECRET:
    raise ValueError("ูุฌุจ ุชุนููู LINE_CHANNEL_ACCESS_TOKEN ู LINE_CHANNEL_SECRET ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ")

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# ========================
# Google Gemini
# ========================
GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
if not GOOGLE_API_KEY:
    raise ValueError("ูุฌุจ ุชุนููู GOOGLE_API_KEY ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ")

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

# ========================
# ุฏูุงู ูุณุงุนุฏุฉ ูุชุทุจูุน ุงููุต
# ========================
def normalize_arabic(text):
    """ุชุทุจูุน ุงููุต ุงูุนุฑุจู ุจุดูู ุฃูุถู"""
    # ุงุณุชุจุฏุงู ุงูุฃููุงุช ูู ุจุฏุงูุฉ ุงููููุงุช ููุท
    text = re.sub(r'\bุฃ', 'ุง', text)
    text = re.sub(r'\bุฅ', 'ุง', text)
    text = re.sub(r'\bุข', 'ุง', text)
    return text.strip()

def extract_command_content(text, command, alternative_commands=[]):
    """ุงุณุชุฎุฑุงุฌ ุงููุญุชูู ุจุนุฏ ุงูุฃูุฑ"""
    text = normalize_arabic(text.lower())
    
    # ูุงุฆูุฉ ุฌููุน ุงูุฃูุงูุฑ ุงูููููุฉ
    all_commands = [command] + alternative_commands
    
    for cmd in all_commands:
        cmd_normalized = normalize_arabic(cmd.lower())
        if text.startswith(cmd_normalized):
            content = text[len(cmd_normalized):].strip()
            return content
    return None

# ========================
# ุฏูุงู ุงููุณุงุนุฏ ุงููุญุณููุฉ
# ========================
def create_command(prompt):
    """ุฅูุดุงุก ูุญุชูู ุจุงุณุชุฎุฏุงู Gemini"""
    try:
        response = model.generate_content(prompt)
        if response.text:
            return response.text
        return "โ ูู ุฃุชููู ูู ุฅูุดุงุก ูุญุชูู ููุงุณุจ."
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู create_command: {str(e)}")
        return f"โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงููุนุงูุฌุฉ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู."

def generate_image_prompt(description):
    """ุฅูุดุงุก ูุตู ุชูุตููู ููุตูุฑุฉ"""
    try:
        prompt = f"""ุฃูุดุฆ ูุตูุงู ุชูุตูููุงู ูุฏูููุงู ูุตูุฑุฉ ูููู ุงุณุชุฎุฏุงูู ูุน ุฃุฏูุงุช ุชูููุฏ ุงูุตูุฑ ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู.
        
ุงูููุถูุน: {description}

ูุฌุจ ุฃู ูุชุถูู ุงููุตู:
- ุงูุชูุงุตูู ุงูุจุตุฑูุฉ ุงูุฏูููุฉ
- ุงูุฃููุงู ูุงูุฅุถุงุกุฉ
- ุงูููุธูุฑ ูุงูุฒุงููุฉ
- ุงูุฃุณููุจ ุงูููู (ูุงูุนูุ ูุฑุชูููุ ุฅูุฎ)
- ุงูุญุงูุฉ ุงููุฒุงุฌูุฉ ูุงูุฌู ุงูุนุงู"""
        
        response = model.generate_content(prompt)
        return response.text if response.text else "โ ูู ุฃุชููู ูู ุฅูุดุงุก ูุตู ุงูุตูุฑุฉ."
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู generate_image_prompt: {str(e)}")
        return "โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ูุตู ุงูุตูุฑุฉ."

def generate_video_guide(topic):
    """ุฅูุดุงุก ุฏููู ูุฅูุชุงุฌ ููุฏูู"""
    try:
        prompt = f"""ุฃูุดุฆ ุฏูููุงู ุดุงููุงู ููุฎุชุตุฑุงู ูุฅูุดุงุก ููุฏูู ุนู: {topic}

ูุฌุจ ุฃู ูุชุถูู:
1. ุงูููุฑุฉ ุงูุฑุฆูุณูุฉ
2. ุงูุณููุงุฑูู ุงูููุชุฑุญ (3-5 ูุดุงูุฏ)
3. ุงูุนูุงุตุฑ ุงููุฑุฆูุฉ ุงููุทููุจุฉ
4. ุงูููุณููู ูุงููุคุซุฑุงุช ุงูุตูุชูุฉ
5. ูุฏุฉ ุงูููุฏูู ุงูููุชุฑุญุฉ
6. ูุตุงุฆุญ ููุชุตููุฑ ุฃู ุงูุชุญุฑูุฑ"""
        
        response = model.generate_content(prompt)
        return response.text if response.text else "โ ูู ุฃุชููู ูู ุฅูุดุงุก ุฏููู ุงูููุฏูู."
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู generate_video_guide: {str(e)}")
        return "โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุฏููู ุงูููุฏูู."

def generate_presentation(topic):
    """ุฅูุดุงุก ูุญุชูู ุนุฑุถ ุชูุฏููู"""
    try:
        prompt = f"""ุฃูุดุฆ ูุญุชูู ุนุฑุถ ุชูุฏููู ุงุญุชุฑุงูู ูููุธู ุนู: {topic}

ุงูุชูุณูู:
๐ ุงูุดุฑูุญุฉ 1: ุงูุนููุงู ูุงูููุฏูุฉ
๐ ุงูุดุฑูุญุฉ 2-4: ุงูููุงุท ุงูุฑุฆูุณูุฉ (ูุน ุชูุงุตูู ูุฎุชุตุฑุฉ)
๐ ุงูุดุฑูุญุฉ ุงูุฃุฎูุฑุฉ: ุงูุฎูุงุตุฉ ูุงูุชูุตูุงุช

ุงุฌุนู ูู ุดุฑูุญุฉ ูุงุถุญุฉ ููุฎุชุตุฑุฉ ุจููุงุท ูุญุฏุฏุฉ."""
        
        response = model.generate_content(prompt)
        return response.text if response.text else "โ ูู ุฃุชููู ูู ุฅูุดุงุก ุงูุนุฑุถ ุงูุชูุฏููู."
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู generate_presentation: {str(e)}")
        return "โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุนุฑุถ."

def teach_english_game(word):
    """ุชุนููู ูููุฉ ุฅูุฌููุฒูุฉ ุจุทุฑููุฉ ุชูุงุนููุฉ"""
    try:
        prompt = f"""ุนููู ูููุฉ '{word}' ููุฃุทูุงู ุจุทุฑููุฉ ููุชุนุฉ ูุชูุงุนููุฉ.

ูุฌุจ ุฃู ูุชุถูู:
๐ค ุงููููุฉ: {word}
๐ฃ๏ธ ุงููุทู ุงูุตุญูุญ (ุจุงูุนุฑุจูุฉ)
๐ ุงููุนูู ุจุงูุนุฑุจูุฉ
๐ ุฌููุฉ ูุซุงู ุจุณูุทุฉ
๐ฎ ูุนุจุฉ ุฃู ูุดุงุท ุชูุงุนูู ูุชุนูู ุงููููุฉ
๐จ ุทุฑููุฉ ูุชุฐูุฑ ุงููููุฉ (ุฑุจุทูุง ุจุตูุฑุฉ ุฃู ูุตุฉ)"""
        
        response = model.generate_content(prompt)
        return response.text if response.text else "โ ูู ุฃุชููู ูู ุฅูุดุงุก ุฏุฑุณ ุงููููุฉ."
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู teach_english_game: {str(e)}")
        return "โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุฏุฑุณ."

def create_story(topic):
    """ูุชุงุจุฉ ูุตุฉ ููุฃุทูุงู"""
    try:
        prompt = f"""ุงูุชุจ ูุตุฉ ูุตูุฑุฉ ูุดููุฉ ููุฃุทูุงู ุนู: {topic}

ุงููุชุทูุจุงุช:
- ุงููุตุฉ ูุฌุจ ุฃู ุชููู ุจุณูุทุฉ ูููุงุณุจุฉ ููุฃุทูุงู (6-12 ุณูุฉ)
- ุชุญุชูู ุนูู ุฏุฑุณ ุฃุฎูุงูู ุฃู ูููุฉ ุชุฑุจููุฉ
- ุทูู ุงููุตุฉ: 200-300 ูููุฉ
- ุงุณุชุฎุฏู ูุบุฉ ุจุณูุทุฉ ูุญูุงุฑุงุช ููุชุนุฉ
- ุฃุถู ุนูุงุตุฑ ูู ุงูุฎูุงู ูุงูุฅุซุงุฑุฉ"""
        
        response = model.generate_content(prompt)
        return response.text if response.text else "โ ูู ุฃุชููู ูู ูุชุงุจุฉ ุงููุตุฉ."
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู create_story: {str(e)}")
        return "โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุชุงุจุฉ ุงููุตุฉ."

def HELP_TEXT():
    """ูุต ุงููุณุงุนุฏุฉ"""
    return """๐ค ูุฑุญุจุงู! ุฃูุง ุจูุช ุฐูู ูุณุงุนุฏู ูู ุงูุฅุจุฏุงุน ูุงูุชุนูู

๐ ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:

1๏ธโฃ **ุตูุฑุฉ** [ูุตู]
   ูุซุงู: ุตูุฑุฉ ูุทุฉ ูุทููุฉ ูู ุญุฏููุฉ

2๏ธโฃ **ููุฏูู** [ููุถูุน]
   ูุซุงู: ููุฏูู ุนู ุงููุถุงุก ูุงูููุงูุจ

3๏ธโฃ **ุนุฑุถ** [ููุถูุน]
   ูุซุงู: ุนุฑุถ ุนู ุงูุทุงูุฉ ุงูุดูุณูุฉ

4๏ธโฃ **ุฃูุฑ** [ุทูุจ]
   ูุซุงู: ุฃูุฑ ุชุตููู ุดุนุงุฑ ูุดุฑูุฉ ุชูููุฉ

5๏ธโฃ **ุชุนููู** [ูููุฉ]
   ูุซุงู: ุชุนููู Apple

6๏ธโฃ **ูุตุฉ** [ููุถูุน]
   ูุซุงู: ูุตุฉ ุนู ุงูุดุฌุงุนุฉ

7๏ธโฃ **ูุณุงุนุฏุฉ**
   ูุนุฑุถ ูุฐู ุงููุงุฆูุฉ

๐ก ููููู ุฃูุถุงู ุฃู ุชุณุฃููู ุฃู ุณุคุงู ูุณุฃุฌูุจู!"""

# ========================
# Quick Reply Buttons
# ========================
def get_quick_reply():
    """ุฅูุดุงุก ุฃุฒุฑุงุฑ ุงูุฑุฏ ุงูุณุฑูุน"""
    return QuickReply(items=[
        QuickReplyButton(action=MessageAction(label="๐ธ ุตูุฑุฉ", text="ุตูุฑุฉ ูุทุฉ ูุทููุฉ")),
        QuickReplyButton(action=MessageAction(label="๐ฌ ููุฏูู", text="ููุฏูู ุนู ุงููุถุงุก")),
        QuickReplyButton(action=MessageAction(label="๐ ูุตุฉ", text="ูุตุฉ ุนู ุงูุดุฌุงุนุฉ")),
        QuickReplyButton(action=MessageAction(label="๐ ุนุฑุถ", text="ุนุฑุถ ุนู ุงูููุงูุจ")),
        QuickReplyButton(action=MessageAction(label="๐งฉ ุฃูุฑ", text="ุฃูุฑ ุชุตููู ุดุนุงุฑ")),
        QuickReplyButton(action=MessageAction(label="๐ค ุชุนููู", text="ุชุนููู Apple")),
        QuickReplyButton(action=MessageAction(label="๐ฌ ูุณุงุนุฏุฉ", text="ูุณุงุนุฏุฉ")),
    ])

# ========================
# Webhook
# ========================
@app.route("/callback", methods=['POST'])
def callback():
    """ูุนุงูุฌุฉ webhook ูู LINE"""
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)
    
    logger.info(f"Request body: {body}")
    
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        logger.error("Invalid signature")
        return "Invalid signature", 400
    except Exception as e:
        logger.error(f"Error in callback: {str(e)}")
        return "Internal Server Error", 500
    
    return 'OK', 200

# ========================
# ุงูุชุนุงูู ูุน ุงูุฑุณุงุฆู
# ========================
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    """ูุนุงูุฌุฉ ุงูุฑุณุงุฆู ุงููุตูุฉ"""
    try:
        user_msg = event.message.text.strip()
        user_msg_normalized = normalize_arabic(user_msg.lower())
        
        logger.info(f"Received message: {user_msg}")
        
        # ุฃูุฑ ุงููุณุงุนุฏุฉ
        if any(word in user_msg_normalized for word in ["ูุณุงุนุฏุฉ", "ุณุงุนุฏูู", "help", "ุงูุงูุงูุฑ"]):
            reply_text = HELP_TEXT()
        
        # ุตูุฑุฉ
        elif user_msg_normalized.startswith("ุตูุฑุฉ"):
            description = extract_command_content(user_msg, "ุตูุฑุฉ")
            reply_text = generate_image_prompt(description) if description else "โ ูุฑุฌู ุฅุถุงูุฉ ูุตู ููุตูุฑุฉ.\nูุซุงู: ุตูุฑุฉ ูุทุฉ ูุทููุฉ ูู ุญุฏููุฉ"
        
        # ููุฏูู
        elif user_msg_normalized.startswith("ููุฏูู"):
            topic = extract_command_content(user_msg, "ููุฏูู")
            reply_text = generate_video_guide(topic) if topic else "โ ูุฑุฌู ุชุญุฏูุฏ ููุถูุน ุงูููุฏูู.\nูุซุงู: ููุฏูู ุนู ุงููุถุงุก"
        
        # ุนุฑุถ
        elif user_msg_normalized.startswith("ุนุฑุถ"):
            topic = extract_command_content(user_msg, "ุนุฑุถ")
            reply_text = generate_presentation(topic) if topic else "โ ูุฑุฌู ุชุญุฏูุฏ ููุถูุน ุงูุนุฑุถ.\nูุซุงู: ุนุฑุถ ุนู ุงูุทุงูุฉ ุงูุดูุณูุฉ"
        
        # ุฃูุฑ ุงุญุชุฑุงูู
        elif user_msg_normalized.startswith(("ุงูุฑ", "ุฃูุฑ")):
            topic = extract_command_content(user_msg, "ุฃูุฑ", ["ุงูุฑ"])
            reply_text = create_command(f"ุงูุชุจ ุฃูุฑุงู ุงุญุชุฑุงููุงู ูููุตูุงู ุนู: {topic}") if topic else "โ ูุฑุฌู ุชุญุฏูุฏ ูุง ุชุฑูุฏ.\nูุซุงู: ุฃูุฑ ุชุตููู ุดุนุงุฑ"
        
        # ุชุนููู
        elif user_msg_normalized.startswith("ุชุนููู"):
            word = extract_command_content(user_msg, "ุชุนููู")
            reply_text = teach_english_game(word) if word else "โ ูุฑุฌู ุชุญุฏูุฏ ุงููููุฉ.\nูุซุงู: ุชุนููู Apple"
        
        # ูุตุฉ
        elif user_msg_normalized.startswith("ูุตุฉ"):
            topic = extract_command_content(user_msg, "ูุตุฉ")
            reply_text = create_story(topic) if topic else "โ ูุฑุฌู ุชุญุฏูุฏ ููุถูุน ุงููุตุฉ.\nูุซุงู: ูุตุฉ ุนู ุงูุดุฌุงุนุฉ"
        
        # ุงูุฑุฏ ุงูุฐูู ูุฃู ุฑุณุงูุฉ ุฃุฎุฑู
        else:
            reply_text = create_command(f"ุฑุฏ ุจุทุฑููุฉ ูุฏูุฉ ููููุฏุฉ ุนูู ูุฐู ุงูุฑุณุงูุฉ: {user_msg}")
        
        # ุชูุณูู ุงูุฑุฏ ุฅุฐุง ูุงู ุทูููุงู (LINE limit: 5000 characters)
        if len(reply_text) > 5000:
            reply_text = reply_text[:4950] + "\n\n... (ุชู ุงุฎุชุตุงุฑ ุงูุฑุฏ)"
        
        # ุฅุฑุณุงู ุงูุฑุฏ
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_text, quick_reply=get_quick_reply())
        )
        
    except LineBotApiError as e:
        logger.error(f"LINE Bot API Error: {e.status_code} - {e.error.message}")
    except Exception as e:
        logger.error(f"Error handling message: {str(e)}")
        try:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="โ ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.")
            )
        except:
            pass

# ========================
# Health Check
# ========================
@app.route("/", methods=['GET'])
def health_check():
    """ูุญุต ุตุญุฉ ุงูุชุทุจูู"""
    return jsonify({
        "status": "healthy",
        "service": "LINE Bot with Gemini AI",
        "version": "2.0"
    }), 200

# ========================
# ุชุดุบูู ุงูุชุทุจูู
# ========================
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"Starting application on port {port}")
    app.run(host="0.0.0.0", port=port, debug=False)
